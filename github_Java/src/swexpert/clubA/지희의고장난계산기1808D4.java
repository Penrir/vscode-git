package swexpert.clubA;

import java.util.ArrayList;
import java.util.List;
/////////////////////////////////////////////////////////////////////////////////////////////
// 기본 제공코드는 임의 수정해도 관계 없습니다. 단, 입출력 포맷 주의
// 아래 표준 입출력 예제 필요시 참고하세요.
// 표준 입력 예제
// int a;
// double b;
// char g;
// String var;
// long AB;
// a = sc.nextInt();                           // int 변수 1개 입력받는 예제
// b = sc.nextDouble();                        // double 변수 1개 입력받는 예제
// g = sc.nextByte();                          // char 변수 1개 입력받는 예제
// var = sc.next();                            // 문자열 1개 입력받는 예제
// AB = sc.nextLong();                         // long 변수 1개 입력받는 예제
/////////////////////////////////////////////////////////////////////////////////////////////
// 표준 출력 예제
// int a = 0;                            
// double b = 1.0;               
// char g = 'b';
// String var = "ABCDEFG";
// long AB = 12345678901234567L;
//System.out.println(a);                       // int 변수 1개 출력하는 예제
//System.out.println(b); 		       						 // double 변수 1개 출력하는 예제
//System.out.println(g);		       						 // char 변수 1개 출력하는 예제
//System.out.println(var);		       				   // 문자열 1개 출력하는 예제
//System.out.println(AB);		       				     // long 변수 1개 출력하는 예제
/////////////////////////////////////////////////////////////////////////////////////////////
import java.util.Scanner;
import java.util.stream.IntStream;
import java.util.stream.Stream;
import java.io.FileInputStream;

public class 지희의고장난계산기1808D4 {
	private static int result = 0;

	public static void main(String args[]) throws Exception {
		System.setIn(new FileInputStream("src/input.txt"));
		Scanner sc = new Scanner(System.in);
		int T;
		T = sc.nextInt();
		for (int test_case = 1; test_case <= T; test_case++) {
			int[] digit = new int[10];
			for (int i = 0; i < 10; i++) {
				digit[i] = sc.nextInt(); 
			}
			int answer = sc.nextInt();
			//end input
			//대우로 푼다. 정답을 나눠보면서 ..
			
			
			
			
			
			
			
//			int temp = 1 << 31;
//			for (int i = 0; i < 31; i++) {
//				if(((temp >>> i) & answer) != 0) {
//					temp = 31 - i;
//					break;
//				}
//			}
//			int[] measure = new int[temp];
			//약수 저장할 리스트
			List<Integer> measureList = new ArrayList<Integer>();
			int temp = answer;
			int div = 2;
			while(temp != 1) {
				while(temp%div != 0) {
					++div;
				}
				measureList.add(div);
//				System.out.printf("temp %d  div %d%n", temp, div);
				temp /= div;
				div = 2;
			}
//			IntStream.of(digit).forEach(System.out::print);
			for (int i = 0; i < digit.length; i++) {
				if(digit[i] == 1 )
					System.out.print(i + "");
				else {
					System.out.print("-");
				}
			}
			System.out.println();
			System.out.println("ans " + answer);
			measureList.forEach(s -> System.out.print(s.intValue() + " "));
			System.out.println();
			
			//내가 생각한 풀이방법
			/*
			 생각1. 자리수 1개부터 정답의 자리수까지 갯수별로 중복순열만들어서 계산.
			 생각2.완전검색하는데 for문 돌면서 넣을 수 있는 숫자 하나만 뒤에 붙이는거랑 
			 		*랑 숫자 붙이는거랑 전부다 dfs로 검색  
			 		숫자큰 뒤쪽부터 검색하는게 더 빠를듯.
			 생각3. 정답의 약수들을 구해서 약수의 조합들로 답을 구하기.
			 		가장 큰 약수를 빼놓고, 작을 것들 다 곱한거랑 큰거 곱하기.해서 길이 짧은게 답
			 		//약수는 안되는듯.
			 		
			 
			 
			 */
			//숫자는 최대 10개. 곱하기 까지 겨웅의 수 11개
			//길이 최대는 아마도 정잡의 자리수 +3개
			
			System.out.printf("#%d %d%n", test_case, result);
			System.out.println();
		}
	}
}
/*input
 
100
0 0 0 1 1 0 1 0 0 1
34396
1 1 0 0 0 0 0 1 1 0
1000000
0 0 0 0 1 0 0 0 1 1
844898
1 1 0 1 0 0 1 0 1 0
68008
0 0 0 0 0 0 0 0 0 1
793881
1 0 1 1 0 1 1 0 1 1
396335
1 1 0 0 0 1 1 0 0 1
658395
0 0 0 0 0 1 0 0 0 0
34375
0 0 0 0 0 0 1 0 0 0
23976
1 0 0 0 1 0 1 0 1 1
844
0 0 0 0 0 0 1 0 0 0
666
1 1 0 0 0 1 0 1 0 0
180945
0 0 0 0 1 1 0 1 1 1
57475
0 1 0 0 0 0 0 0 0 0
123321
0 0 0 0 1 0 1 0 1 0
6
0 1 0 0 0 0 0 0 0 0
1111
1 0 0 1 0 1 1 0 1 1
47206
1 1 1 1 1 0 0 0 0 1
920
1 0 0 0 0 1 0 0 0 0
5500
0 0 0 1 0 1 0 0 0 0
83025
1 0 0 0 0 0 0 1 1 0
60900
1 0 0 0 1 0 0 1 0 1
7
0 1 0 0 0 0 0 0 0 0
13431
0 0 0 0 1 0 0 0 0 0
78144
0 0 1 0 0 0 1 0 0 0
2222
1 0 0 0 0 1 1 0 1 0
86506
0 1 0 0 0 0 1 0 1 0
86811
0 0 0 1 0 0 0 0 0 0
890109
1 0 1 0 1 0 1 0 1 0
20
1 1 1 0 0 1 0 0 0 1
285499
1 0 0 0 0 1 0 0 0 0
5555
0 0 0 0 0 0 1 0 0 0
396
1 1 1 1 0 0 0 0 0 0
310
1 1 0 0 0 1 0 0 0 0
15110
0 0 0 0 0 0 1 0 1 0
4128
0 1 0 1 0 0 0 0 0 1
9
0 0 0 0 1 1 1 0 1 0
8
0 1 0 0 0 0 0 0 0 0
12221
0 0 0 0 0 0 0 0 1 0
782144
0 0 0 1 0 1 1 0 0 1
994661
0 1 0 0 0 1 1 0 0 0
1666
0 0 1 0 0 0 0 0 0 0
8888
0 0 0 1 0 0 0 0 0 0
10989
1 0 0 1 1 1 0 0 0 0
5
0 0 0 1 1 0 0 0 0 0
443433
0 1 0 1 0 1 0 0 0 0
45
0 0 1 0 0 1 1 1 0 0
772527
0 0 0 1 0 0 1 1 0 0
587972
0 0 1 0 0 1 0 1 0 0
2772
0 0 0 1 0 0 0 1 0 0
7777
0 1 1 0 0 1 1 1 1 0
225575
1 0 1 1 1 1 1 1 0 0
326066
0 1 0 0 1 1 0 0 0 0
55141
1 1 0 0 0 0 1 1 0 0
1
0 0 1 0 1 0 1 1 0 0
666242
0 0 0 1 1 1 1 0 0 0
66633
1 1 1 1 0 0 1 1 0 0
2132
0 1 0 0 0 0 1 1 1 0
881166
0 0 0 0 1 0 0 0 0 0
19536
0 1 0 1 1 0 0 1 0 0
17743
1 1 0 1 0 0 0 0 0 0
980003
1 1 0 1 1 1 1 1 0 1
474936
1 0 1 1 0 1 0 0 1 1
802800
0 0 0 0 0 0 0 0 0 1
89991
1 0 1 1 0 0 1 0 0 0
20222
0 0 0 0 0 0 1 0 0 0
85536
0 0 0 1 0 0 0 0 0 1
9333
0 0 0 0 0 1 0 0 0 0
378125
1 0 1 0 0 0 0 0 0 0
440040
0 1 1 1 1 0 0 0 1 0
11131
1 0 0 1 1 1 1 0 0 1
6990
1 1 0 1 1 0 1 1 1 1
876496
0 1 0 0 0 0 0 0 0 1
17991
0 0 0 1 0 0 0 0 1 0
8838
0 1 1 1 0 1 1 0 0 0
100914
0 0 1 0 0 0 0 0 1 1
929822
0 1 0 0 0 0 0 0 1 0
1584
1 1 1 0 0 0 1 0 0 0
2
0 1 0 0 0 0 0 1 0 0
7117
0 0 1 0 1 0 0 0 1 0
44448
0 0 1 1 0 1 0 1 0 1
285846
0 1 0 1 0 0 0 1 0 1
229632
0 0 1 1 1 0 0 0 1 1
114004
1 0 0 1 1 0 0 0 0 0
3
0 0 0 0 1 1 0 0 0 0
45444
0 0 0 1 0 0 0 0 0 0
98901
1 0 0 1 0 0 1 0 0 1
89239
0 1 0 0 1 1 1 1 1 1
468617
0 1 0 0 0 0 0 0 0 1
199191
1 0 0 1 0 0 1 0 0 0
654480
0 0 1 0 0 0 1 0 0 0
222666
0 0 0 0 0 1 0 1 0 0
290625
1 1 0 0 1 0 0 0 0 0
4
0 0 1 0 1 1 0 1 1 0
245282
0 0 0 0 1 0 0 0 0 0
78144
0 0 0 0 0 0 0 0 0 1
891
1 0 0 0 1 0 1 0 1 1
968469
1 1 1 1 1 0 1 1 1 1
11763
0 1 0 0 0 1 0 1 0 1
55959
1 0 0 1 0 0 1 0 0 0
606

output
#1 6
#2 8
#3 7
#4 6
#5 10
#6 7
#7 -1
#8 11
#9 8
#10 4
#11 4
#12 -1
#13 6
#14 9
#15 2
#16 5
#17 -1
#18 4
#19 5
#20 9
#21 7
#22 2
#23 10
#24 9
#25 5
#26 6
#27 6
#28 15
#29 3
#30 -1
#31 5
#32 5
#33 4
#34 6
#35 6
#36 2
#37 2
#38 8
#39 8
#40 -1
#41 5
#42 9
#43 7
#44 2
#45 7
#46 5
#47 7
#48 8
#49 5
#50 5
#51 7
#52 7
#53 6
#54 2
#55 7
#56 6
#57 5
#58 7
#59 7
#60 6
#61 9
#62 7
#63 7
#64 7
#65 6
#66 11
#67 5
#68 12
#69 9
#70 6
#71 5
#72 7
#73 7
#74 5
#75 -1
#76 7
#77 6
#78 2
#79 5
#80 6
#81 -1
#82 -1
#83 -1
#84 2
#85 6
#86 11
#87 -1
#88 7
#89 7
#90 10
#91 7
#92 9
#93 2
#94 7
#95 9
#96 5
#97 7
#98 6
#99 6
#100 4

*/